@use "@react-ck/theme";
@use "@react-ck/text";

.root {
  @include text.text-base;
  @include theme.define-css-var(button, border-radius, theme.get-spacing(1));
  @include theme.define-css-var(button, color, theme.get-color(neutral-dark-4));

  display: inline-flex;
  box-sizing: border-box;
  align-items: center;
  justify-content: center;
  padding: theme.get-css-var(button, padding-y) theme.get-css-var(button, padding-x);
  border: none;
  border-radius: theme.get-css-var(button, border-radius);
  background-color: theme.get-css-var(button, background-color);
  color: theme.get-css-var(button, color);
  cursor: pointer;
  transition: background-color 0.2s ease;

  &:disabled {
    cursor: not-allowed;
  }

  &.icon-only {
    @include theme.define-css-var(button, border-radius, 50%);

    aspect-ratio: 1/1;
  }
}

.fullwidth {
  width: 100%;
}

.size-l {
  @include theme.define-css-var(button, padding-y, theme.get-spacing(2));
  @include theme.define-css-var(button, padding-x, theme.get-spacing(3));

  &.icon-only {
    @include theme.define-css-var(button, padding-y, theme.get-spacing(1.5));
    @include theme.define-css-var(button, padding-x, theme.get-spacing(1.5));
  }
}

.size-m {
  @include theme.define-css-var(button, padding-y, theme.get-spacing(0.75));
  @include theme.define-css-var(button, padding-x, theme.get-spacing(2));

  &.icon-only {
    @include theme.define-css-var(button, padding-y, theme.get-spacing(1));
    @include theme.define-css-var(button, padding-x, theme.get-spacing(1));
  }
}

.size-s {
  @include theme.define-css-var(button, padding-y, theme.get-spacing(0.25));
  @include theme.define-css-var(button, padding-x, theme.get-spacing(1.25));

  &.icon-only {
    @include theme.define-css-var(button, padding-y, theme.get-spacing(0.66));
    @include theme.define-css-var(button, padding-x, theme.get-spacing(0.66));
    @include text.text-variation(extra-small);
  }
}

.size-xs {
  @include theme.define-css-var(button, padding-y, theme.get-spacing(0.15));
  @include theme.define-css-var(button, padding-x, theme.get-spacing(1));

  &.icon-only {
    @include theme.define-css-var(button, padding-y, theme.get-spacing(0.5));
    @include theme.define-css-var(button, padding-x, theme.get-spacing(0.5));

    // icon size
    > * {
      width: theme.get-spacing(1.2);
      height: theme.get-spacing(1.2);
    }
  }
}

.primary {
  @include theme.define-css-var(button, background-color, theme.get-color(highlight-primary));
  @include theme.define-css-var(button, color, theme.get-color(neutral-light-1));

  &:hover {
    @include theme.define-css-var(
      button,
      background-color,
      theme.get-color(highlight-primary-dark)
    );
  }
}

.primary-alt {
  @include theme.define-css-var(button, background-color, theme.get-color(highlight-primary-light));
  @include theme.define-css-var(button, color, theme.get-color(highlight-primary));

  &:hover {
    @include theme.define-css-var(button, background-color, theme.get-color(highlight-primary));
    @include theme.define-css-var(button, color, theme.get-color(neutral-light-1));
  }
}

.secondary {
  @include theme.define-css-var(button, background-color, theme.get-color(neutral-light-1-5));

  &:hover {
    @include theme.define-css-var(button, background-color, theme.get-color(neutral-light-2));
  }
}

.ghost {
  @include theme.define-css-var(button, background-color, transparent);

  &:hover {
    @include theme.define-css-var(button, background-color, theme.get-color(neutral-light-2));
  }
}

.negative {
  @include theme.define-css-var(button, background-color, theme.get-color(status-negative));
  @include theme.define-css-var(button, color, theme.get-color(neutral-light-1));

  &:hover {
    @include theme.define-css-var(button, background-color, theme.get-color(status-negative-dark));
  }
}

.bordered {
  border: solid theme.get-css-var(spacing, border) theme.get-color(neutral-light-2);
}

.icon {
  display: inline-flex;
  align-items: center;
  margin-right: theme.get-spacing(0.5);
  margin-left: theme.get-spacing(-0.5);
}
