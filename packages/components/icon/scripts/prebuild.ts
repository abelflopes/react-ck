import path from "path";
import fs from "fs";
import { logger, destFolder } from "./common";
import { iconMap, type IconMap } from "../src/icon-map";

function generateIconExport(entry: IconMap[number]): string {
  return `export { ${entry.import} as ${entry.export} } from "${entry.module}";`;
}

let banner = `/* This file is automatically generated */\n`;
banner += `/* Use packages/components/icon/src/icon-map.ts to update icons */\n`;

if (fs.existsSync(destFolder)) {
  logger.info("Removing previous icons", destFolder);
  fs.rmSync(destFolder, { recursive: true });
}

logger.info("Preparing folder", destFolder);
fs.mkdirSync(destFolder, { recursive: true });

logger.info(`Generating ${iconMap.length} isolated icons`);
iconMap.forEach((data) => {
  logger.info(`Generating "${data.export}"`);

  let fileContents = banner;
  fileContents += `${generateIconExport(data)}\n`;

  fs.writeFileSync(path.resolve(destFolder, `./${data.export}.ts`), fileContents, {
    encoding: "utf-8",
  });
});

logger.info(`Generating all ${iconMap.length} icons bundle`);
((): void => {
  let fileContents = banner;
  fileContents += iconMap.map(generateIconExport).join("\n\n");
  fileContents += "\n";

  fs.writeFileSync(path.resolve(destFolder, `./All.ts`), fileContents, {
    encoding: "utf-8",
  });
})();
