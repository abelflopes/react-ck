@use "shared";
@use "@react-ck/scss-utils";
@use "@react-ck/theme";

.root {
  width: 100%; // when inside flex
  max-width: scss-utils.get-css-var(container, max-width);
  box-sizing: border-box;
  padding: scss-utils.get-css-var(container, spacing-y) scss-utils.get-css-var(container, spacing-x);
  margin: 0 auto;
}

// Container size

@each $key, $value in shared.$container-sizes {
  .size_#{$key} {
    @include scss-utils.define-css-var(container, max-width, $value);
  }
}

// Container Spacing Vertical

.spacing_y_none {
  @include scss-utils.define-css-var(container, spacing-y, 0);
}

.spacing_y_s {
  @include scss-utils.define-css-var(container, spacing-y, theme.get-spacing(2));
}

.spacing_y_m {
  @include scss-utils.define-css-var(container, spacing-y, theme.get-spacing(3));
}

.spacing_y_l {
  @include scss-utils.define-css-var(container, spacing-y, theme.get-spacing(6));
}

// Container Spacing Horizontal

.spacing_x_none {
  @include scss-utils.define-css-var(container, spacing-x, 0);
}

.spacing_x_s {
  @include scss-utils.define-css-var(container, spacing-x, theme.get-spacing(2));
}

.spacing_x_m {
  @include scss-utils.define-css-var(container, spacing-x, theme.get-spacing(5));
}

.spacing_x_l {
  @include scss-utils.define-css-var(container, spacing-x, theme.get-spacing(8));
}
