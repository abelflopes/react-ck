@use "@react-ck/theme";
@use "../text/styles/shared" as text;
@use "@react-ck/scss-utils";
@use "@react-ck/elevation";

$outer-spacing: theme.get-spacing(1);
$inner-spacing-y: theme.get-spacing(1);
$inner-spacing-x: theme.get-spacing(2);
$caret-spacing: theme.get-spacing(1.66);

@mixin animation-initial {
  opacity: 0;
}

@keyframes appear {
  from {
    @include animation-initial;
  }

  to {
    opacity: 1;
  }
}

.container {
  @include scss-utils.define-css-var(tooltip, max-height, var(--pe-max-height));
  @include scss-utils.define-css-var(tooltip, max-width, var(--pe-max-width));
  @include scss-utils.define-css-var(tooltip, container-padding-x, 0);
  @include scss-utils.define-css-var(tooltip, container-padding-y, 0);

  z-index: scss-utils.map-get-strict(elevation.$elevation, popup);
  box-sizing: border-box;
  padding: #{scss-utils.get-css-var(tooltip, container-padding-y)}
    #{scss-utils.get-css-var(tooltip, container-padding-x)};
  animation: appear 0.2s ease forwards;
  will-change: opacity;

  @include animation-initial;

  // Apply vertical spacing
  &[class*="top"],
  &[class*="bottom"] {
    @include scss-utils.define-css-var(tooltip, container-padding-y, $outer-spacing);
    @include scss-utils.define-css-var(
      tooltip,
      max-height,
      calc(var(--pe-max-height) - #{$outer-spacing} * 2)
    );

    &[class*="start"] .content::before {
      left: $caret-spacing;
    }

    &[class*="center"] .content::before {
      left: 50%;
      transform: translateX(-50%);
    }

    &[class*="end"] .content::before {
      right: $caret-spacing;
    }
  }

  &[class*="left"],
  &[class*="right"] {
    @include scss-utils.define-css-var(tooltip, container-padding-x, $outer-spacing);
    @include scss-utils.define-css-var(
      tooltip,
      max-width,
      calc(var(--pe-max-width) - #{$outer-spacing} * 2)
    );

    &[class*="start"] .content::before {
      top: $caret-spacing;
    }

    &[class*="center"] .content::before {
      top: 50%;
      transform: translateY(-50%);
    }

    &[class*="end"] .content::before {
      bottom: $caret-spacing;
    }
  }

  &[class*="top"] {
    .content::before {
      top: 100%;
      border-color: theme.get-color(neutral-light-100) transparent transparent;
      filter: drop-shadow(0 3px 2px theme.get-color(neutral-light-400));
    }
  }

  &[class*="bottom"] {
    .content::before {
      bottom: 100%;
      border-color: transparent transparent theme.get-color(neutral-light-100);
      filter: drop-shadow(0 -3px 2px theme.get-color(neutral-light-400));
    }
  }

  &[class*="left"] {
    .content::before {
      left: 100%;
      border-color: transparent transparent transparent theme.get-color(neutral-light-100);
      filter: drop-shadow(3px 0 2px theme.get-color(neutral-light-400));
    }
  }

  &[class*="right"] {
    .content::before {
      right: 100%;
      border-color: transparent theme.get-color(neutral-light-100) transparent transparent;
      filter: drop-shadow(-3px 0 2px theme.get-color(neutral-light-400));
    }
  }
}

.content {
  @include text.text-base;
  @include text.text-variation(extra-small);

  position: relative;
  max-width: scss-utils.get-css-var(tooltip, max-width);
  max-height: scss-utils.get-css-var(tooltip, max-height);
  box-sizing: border-box;
  padding: #{$inner-spacing-y} #{$inner-spacing-x};

  &::before {
    position: absolute;
    display: block;
    width: 0;
    height: 0;
    border-width: theme.get-spacing(0.66);
    border-style: solid;
    content: "";
  }
}
