@use "@react-ck/theme";
@use "@react-ck/scss-utils";
@use "../../text/styles/shared" as text;

@mixin sticky_headers {
  thead td,
  thead th {
    @content;
  }
}

@mixin sticky-column {
  thead th:first-child,
  thead td:first-child,
  tbody td:first-child,
  tfoot td:first-child,
  tfoot th:first-child {
    @content;
  }
}

// Root

.root {
  @include scss-utils.define-css-var(table, border-color, transparent);
  @include scss-utils.define-css-var(table, border-color-row, transparent);
  @include scss-utils.define-css-var(table, border-color-column, transparent);

  box-sizing: border-box;
  border: solid scss-utils.get-css-var(spacing, border) scss-utils.get-css-var(table, border-color);
  border-radius: theme.get-spacing(1);
}

// Scrollable

.scrollable {
  max-width: 100%;
  max-height: 100%;

  @include sticky-column {
    background-color: theme.get-color(neutral-light-100);
    position: sticky;
    left: 0;
    z-index: 2;
  }

  thead {
    position: sticky;
    top: 0;
    z-index: 3 !important;
  }

  @include sticky_headers {
    background-color: theme.get-color(neutral-light-300-solid) !important;
    white-space: nowrap;

    &:first-child {
      z-index: 1;
    }
  }
}

// Skins

.scrollable.skin_bordered-row,
.scrollable.skin_bordered {
  @include sticky_headers {
    &::before {
      content: "";
      background-color: scss-utils.get-css-var(table, border-color);
      display: block;
      position: absolute;
      bottom: calc(#{scss-utils.get-css-var(spacing, border)} * -1);
      left: 0;
      width: 100%;
      height: scss-utils.get-css-var(spacing, border);
      z-index: 1;
    }
  }
}

.scrollable.skin_bordered-column,
.scrollable.skin_bordered {
  @include sticky-column {
    &::after {
      content: "";
      background-color: scss-utils.get-css-var(table, border-color);
      display: block;
      position: absolute;
      top: 0;
      right: 0;
      width: scss-utils.get-css-var(spacing, border);
      height: 100%;
    }
  }
}

.skin_bordered,
.skin_bordered-column,
.skin_bordered-row {
  @include scss-utils.define-css-var(table, border-color, theme.get-color(neutral-light-300-solid));
}

.skin_bordered,
.skin_bordered-row {
  @include scss-utils.define-css-var(
    table,
    border-color-row,
    theme.get-color(neutral-light-300-solid)
  );
}

.skin_bordered,
.skin_bordered-column {
  @include scss-utils.define-css-var(
    table,
    border-color-column,
    theme.get-color(neutral-light-300-solid)
  );
}

// Spacing

.spacing_default {
  @include scss-utils.define-css-var(table, spacing, theme.get-spacing(1.5));
  @include scss-utils.define-css-var(table, min-height, theme.get-spacing(5));
}

.spacing_compact {
  @include scss-utils.define-css-var(table, spacing, theme.get-spacing(1));
  @include scss-utils.define-css-var(table, min-height, theme.get-spacing(4));
}

.spacing_none {
  @include scss-utils.define-css-var(table, spacing, 0);
  @include scss-utils.define-css-var(table, min-height, 0);
}

// Table

.table {
  @include text.text-base(small);

  width: 100%;
  border-radius: inherit;
  border-collapse: collapse;

  td,
  th {
    box-sizing: border-box;
    height: scss-utils.get-css-var(table, min-height);
    padding: calc(scss-utils.get-css-var(table, spacing) / 2) scss-utils.get-css-var(table, spacing);

    &:not(:last-child) {
      border-right: solid scss-utils.get-css-var(spacing, border)
        scss-utils.get-css-var(table, border-color-column);
    }
  }

  thead tr,
  tr:not(:last-child) {
    th,
    td {
      border-bottom: solid scss-utils.get-css-var(spacing, border)
        scss-utils.get-css-var(table, border-color-row);
    }
  }
}
