@use "@react-ck/scss-utils";
@use "mixins";
@use "variables";
@use "sass:map";

.root {
  @include mixins.text-base;
  @include scss-utils.define-css-var(text, margin-top, 0);
  @include scss-utils.define-css-var(text, margin-bottom, 0);

  margin-top: scss-utils.get-css-var(text, margin-top);
  margin-bottom: scss-utils.get-css-var(text, margin-bottom);
}

button.root {
  appearance: none;
  border: none;
  background-color: transparent;
  cursor: pointer;
}

// Variation

.variation_h1,
.variation_h2,
.variation_h3,
.variation_h4,
.variation_h5,
.variation_h6 {
  // Force block display in case of component with inline element
  display: block;
}

@each $variation in map.keys(variables.$text-variations) {
  .variation_#{$variation} {
    @include mixins.text-variation($variation);
  }
}

// Skins

@each $skin in map.keys(variables.$text-skins) {
  .skin_#{$skin} {
    @include mixins.text-skin($skin);
  }
}

// Margin

.variation_h1,
.variation_h2,
.variation_h3,
.variation_h4,
.variation_h5,
.variation_h6 {
  @include scss-utils.define-css-var(text, margin-top, scss-utils.get-css-var(text, font-size));
  @include scss-utils.define-css-var(
    text,
    margin-bottom,
    calc(#{scss-utils.get-css-var(text, font-size)} * 0.75)
  );
}

.margin_both,
.margin_top,
p.variation_p {
  @include scss-utils.define-css-var(text, margin-top, scss-utils.get-css-var(text, font-size));
}

.margin_both,
.margin_bottom,
p.variation_p {
  @include scss-utils.define-css-var(text, margin-bottom, scss-utils.get-css-var(text, font-size));
}

.margin_none,
.margin_top {
  @include scss-utils.define-css-var(text, margin-bottom, 0, true);
}

.margin_none,
.margin_bottom {
  @include scss-utils.define-css-var(text, margin-top, 0, true);
}
