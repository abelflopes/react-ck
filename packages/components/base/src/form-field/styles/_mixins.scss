@use "@react-ck/theme";
@use "../../text/styles/shared" as text;
@use "@react-ck/scss-utils";
@use "variables";

@mixin wrapper {
  border: solid #{scss-utils.get-css-var(form-field, border-color)} variables.$form-field-border-width;
  border-radius: theme.get-spacing(1);
  background: scss-utils.get-css-var(form-field, background-color);
}

@mixin spacing {
  padding: calc(theme.get-spacing(0.688) - scss-utils.get-css-var(spacing, border))
    theme.get-spacing(1);
}

@mixin focus-base {
  // TODO: focus mixin
  outline: solid scss-utils.get-css-var(spacing, border) transparent;
  transition-duration: 0.3s;
  transition-property: outline, outline-offset;
  transition-timing-function: ease;
}

@mixin focus-active {
  // TODO: focus mixin
  outline: solid scss-utils.get-css-var(spacing, border) theme.get-color(highlight-primary);
  outline-offset: theme.get-spacing(0.2);
}

@mixin skins {
  @each $key, $props in variables.$form-field-styles {
    &.skin_#{$key} {
      @each $propKey, $propValue in $props {
        @include scss-utils.define-css-var(form-field, $propKey, $propValue);
      }
    }
  }
}

@mixin placeholder {
  color: theme.get-color(neutral-dark-100);
}

// input not inside form field
@mixin standalone-input {
  @include wrapper;
  @include skins;

  min-height: variables.$form-field-input-height;
}

// input inside form field
@mixin form-field-input {
  @include spacing;
  @include text.text-base;

  width: 100%;
  min-height: calc(
    #{variables.$form-field-input-height} - #{variables.$form-field-border-width} * 2
  );
  box-sizing: border-box;
  border: none;
  border-radius: theme.get-spacing(1);
  background: transparent;
  color: theme.get-color(neutral-dark-500);
  outline: none;

  &::placeholder {
    @include placeholder;
  }

  &:disabled {
    @include theme.disabled;
  }
}
