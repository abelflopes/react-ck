@use "@react-ck/theme";
@use "@react-ck/text";
@use "@react-ck/scss-utils";
@use "variables";

.root {
  display: flex;
  box-sizing: border-box;
  align-items: center;
  justify-content: space-between;
  padding: #{scss-utils.get-css-var(alert, padding-x)} #{scss-utils.get-css-var(alert, padding-y)};
  border: solid 1px theme.get-color(neutral-light-1-5);
  border-radius: scss-utils.get-css-var(alert, padding-y);
  background-color: scss-utils.get-css-var(alert, background-color);
  color: scss-utils.get-css-var(alert, color);
  gap: scss-utils.get-css-var(alert, padding-x);

  .heading {
    color: inherit;
  }
}

.content {
  @include text.text-base;
}

.compact {
  border-radius: 0;

  .content,
  .heading {
    @include text.text-variation(small);

    display: inline;
  }

  .heading {
    @include text.text-skin(bold);

    margin-right: theme.get-spacing(0.5);
  }
}

@each $key, $props in variables.$alert-styles {
  .#{$key} {
    @each $propKey, $propValue in $props {
      @include scss-utils.define-css-var(alert, $propKey, $propValue);
    }
  }
}

@each $key, $props in variables.$alert-sizes {
  .size_#{$key} {
    @include scss-utils.define-css-var(
      alert,
      padding-x,
      scss-utils.map-get-strict($props, padding-x)
    );
    @include scss-utils.define-css-var(
      alert,
      padding-y,
      scss-utils.map-get-strict($props, padding-y)
    );
  }
}
